#pragma kernel CSMain
#pragma kernel Mix
#include "Ray.hlsl"

Texture2D<float4> Scene;
RWTexture2D<float4> Downscale;
RWTexture2D<float4> Result;
int Width;
int Height;
int DownscaleFactor;
float BlendAmount; 

// float3 ray_color(Ray r, hittable_list world) {
//     hit_record rec;
//     if (world.hit(r, 0, infinity, rec)) {
//         return 0.5 * (rec.normal + float3(1,1,1));
//     }
//     float3 unit_direction = unit_vector(r.direction);
//     float t = 0.5*(unit_direction.y + 1.0);
//     return (1.0-t)*float3(1.0, 1.0, 1.0) + t*float3(0.5, 0.7, 1.0);
// }

float3 ray_color(Ray r, Sphere sphere) {
    float t = sphere.hit_sphere(r);
    if (t > 0.0) {
        float3 N = unit_vector(r.at(t) - float3(0,0,-1));
        return 0.5*float3(N.x+1, N.y+1, N.z+1);
    }
    float3 unit_direction = unit_vector(r.direction);
    t = 0.5*(unit_direction.y + 1.0);
    return (1.0-t)*float3(1.0, 1.0, 1.0) + t*float3(0.5, 0.7, 1.0);
}

// float3 ray_color(Ray r, Sphere sphere) { 
//     HitRecord rec;
//     if (sphere.hit(r, 0, infinity, rec)) {
//         return 0.5 * (rec.normal + float3(1,1,1));
//     }
//     float3 unit_direction = unit_vector(r.direction);
//     float t = 0.5*(unit_direction.y + 1.0);
//     return (1.0-t)*float3(1.0, 1.0, 1.0) + t*float3(0.5, 0.7, 1.0);
// }

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Image
    const float aspect_ratio = float(Width) / float(Height);

    // World
    SphereList world;
    Sphere s1 = {
        0,0,-1,
        0.5,
    };
    Sphere s2 = {
        0,-100.5,-1,
        100}; 
    world.spheres[0] = s1;
    world.spheres[1] = s2;
    
    // Camera
    float viewport_height = 2.0;
    float viewport_width = aspect_ratio * viewport_height;
    float focal_length = 1.0;

    float3 origin = 0;
    float3 horizontal = float3(viewport_width, 0, 0);
    float3 vertical = float3(0, viewport_height, 0);
    float3 lower_left_corner = origin - horizontal/2 - vertical/2 - float3(0, 0, focal_length);

    // Render
    float u = float(id.x) / (Width-1);
    float v = float(id.y) / (Height-1);
    
    Ray ray;
    ray.origin = origin;
    ray.direction = lower_left_corner + u*horizontal + v*vertical - origin;

    float3 pixel_color = ray_color(ray, s1);
    Downscale[id.xy] = float4(pixel_color, 1.0);
}

[numthreads(8,8,1)]
void Mix (uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = lerp(Scene[id.xy], Downscale[id.xy / DownscaleFactor],BlendAmount);
}
